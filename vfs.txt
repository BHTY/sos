VIRTUAL FILESYSTEM DESIGN
Any function calls made to do file operations first go to the virtual filesystem, which is part of the kernel. 
Every path is prepended with a device number (e.g. /0/dir/...) that indicates how it should be used. For example, the main hard disk is /1/...
The operating system configuration file includes a list of drivers for each device and this is used to maintain a VFS data structure for each physical indexed mounting point.
Once the VFS resolves which device the operation will be directed towards, it then hands the call to the physical device layer, with two drivers - the filesystem driver and the block-level device driver.
The block-level device driver (e.g. the ATA PIO driver) provides direct access for reading and writing sectors, which is used by the filesystem driver.

The file API mirrors that of the C runtime library.

Loading a RAM disk, for instance, uses the same WillFS driver as a physical hard disk, but the block-level device driver reads and writes memory rather than using PIO to transfer bytes over the IDE/ATA bus.
If you do create a RAM disk, the memory is allocated, and the requisite function pointers are placed directly into the data structure for the desired VFS mount point.

Up to 256 devices (0-255)

Lingering Design Questions
* FS and block-level device drivers statically linked to kernel? (the VFS will be statically linked)
* Assuming they are separate, in some sort of relocated or PIC driver, how are remote procedure calls made?

Options for communicating with drivers (broad question but important to answer)
* Message passing (e.g. you send a systemwide message to find the driver you want, then send a message with a pointer to a struct containing the operation ID and operands)
* Function pointers - the execution still occurs in the context of the driver

Message passing incurs possible performance penalties

If syscalls are using software interrupts anyway, it's moving from the kernel to the device driver and back

Important Considerations
* Multiple instances of a given filesystem driver can exist, but all processes accessing the same disk must also share the same FS driver state

A disk driver doesn't need much state, while a filesystem driver kind of does
